.cew27ew{height:var(--cew27ew-0);-webkit-align-items:var(--cew27ew-1);-webkit-box-align:var(--cew27ew-1);-ms-flex-align:var(--cew27ew-1);align-items:var(--cew27ew-1);-webkit-transition:var(--cew27ew-2);transition:var(--cew27ew-2);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;overflow:hidden;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;pointer-events:none;}
.s1b2ugnh{opacity:var(--s1b2ugnh-0);-webkit-transform:var(--s1b2ugnh-1);-ms-transform:var(--s1b2ugnh-1);transform:var(--s1b2ugnh-1);-webkit-transition:var(--s1b2ugnh-2);transition:var(--s1b2ugnh-2);-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;}
.shsfp3r{width:var(--shsfp3r-0);height:var(--shsfp3r-0);stroke:var(--shsfp3r-2);-webkit-animation:var(--shsfp3r-3);animation:var(--shsfp3r-3);}@-webkit-keyframes scale-shsfp3r{0%{-webkit-transform:scale(1.3);-ms-transform:scale(1.3);transform:scale(1.3);}100%{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);}}@keyframes scale-shsfp3r{0%{-webkit-transform:scale(1.3);-ms-transform:scale(1.3);transform:scale(1.3);}100%{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);}}@-webkit-keyframes rotate360-shsfp3r{from{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}to{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}@keyframes rotate360-shsfp3r{from{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}to{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}
/*# sourceMappingURL=data:application/json;base64,*/